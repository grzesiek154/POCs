package com.SingerDataJpa.service;

import com.SingerDataJpa.entities.Singer;
import com.SingerDataJpa.repo.SingerRepository;
import com.google.common.collect.Lists;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service("springJpaSingerService")
@Transactional
public class SingerServiceImpl implements SingerService {

    @Autowired
    private SingerRepository singerRepository;

    @Override
    @Transactional(readOnly = true)
    public List<Singer> findAll() {
        return Lists.newArrayList(singerRepository.findAll());
    }

    @Override
    @Transactional(readOnly = true)
    public List<Singer> findByFirstName(String name) {

        return singerRepository.findByFirstName(name);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Singer> findByFirstNameAndLastName(String firstName, String lastName) {
        return singerRepository.findByFirstNameAndLastName(firstName,lastName);
    }
//    You can see that instead of EntityManager, we just need to inject the singerRepository bean,
//    generated by Spring based on the SingerRepository interface, into the service class, and Spring Data JPA
//    will do all the low-level work for us. In the following code snippet, you can see a testing class, and by now
//    you should already be familiar with its content
}
